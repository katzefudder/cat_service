version: "2.2"
services:
    consul1:
      build:
        context: ./consul
      container_name: 'consul1'
      environment:
      - 'CONSUL_LOCAL_CONFIG={"datacenter":"cat-service"}'
      command: 'agent -server -bootstrap-expect=3 -ui -client=0.0.0.0 -node=consul1 -log-level=debug'
      ports:
        - '8300:8300'
        - '8301:8301'
        - '8302:8302'
        - '8400:8400'
        - '8500:8500'
        - '8600:53/udp'
      networks:
        - docker-consul

    consul2:
      build:
        context: ./consul
      container_name: 'consul2'
      environment:
      - 'CONSUL_LOCAL_CONFIG={"datacenter":"cat-service"}'
      command: 'agent -server -retry-join consul1 -node=consul2 -log-level=debug'
      depends_on:
        - consul1
      networks:
        - docker-consul

    consul3:
      build:
        context: ./consul
      container_name: 'consul3'
      environment:
      - 'CONSUL_LOCAL_CONFIG={"datacenter":"cat-service"}'
      command: 'agent -server -retry-join consul1 -node=consul3 -log-level=debug'
      depends_on:
        - consul1
      networks:
        - docker-consul

    webserver:
      build: ./webserver
      scale: 3
      depends_on:
        - loadbalancer
      networks:
        - docker-consul

    loadbalancer:
      build:
        context: ./loadbalancer
      container_name: loadbalancer
      ports:
        - "80:80"
        - "9145:9145"
        - "9100"
      volumes:
        - "./loadbalancer/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf"
        - "./loadbalancer/nginx_proxy.conf:/etc/consul-template/config.d/templates/nginx.conf"
        - "./loadbalancer/prometheus.conf:/etc/nginx/conf.d/prometheus.conf"
        - "./loadbalancer/start.sh:/start.sh"
        - "/data/nginx/cache"
      depends_on:
        - consul1
      networks:
        - docker-consul

    prometheus:
      image: prom/prometheus
      container_name: prometheus
      command:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.min-block-duration=2h"
        - "--storage.tsdb.max-block-duration=2h"
      volumes:
        - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
        - "./prometheus/alerts.yml:/etc/prometheus/alerts.yml"
        - prometheus_data:/prometheus
      ports:
        - "9090:9090"
      depends_on:
        - loadbalancer
      networks:
        - docker-consul

    thanos-sidecar:
        image: quay.io/thanos/thanos:v0.13.0
        container_name: thanos-sidecar
        volumes:
            - ./thanos/:/etc/thanos/
            - prometheus_data:/prometheus
        command:
            - 'sidecar'
            - '--tsdb.path=/prometheus'
            - '--prometheus.url=http://prometheus:9090'
            - '--grpc-address=0.0.0.0:10091'
            - '--http-address=0.0.0.0:10902'
            - '--objstore.config-file=/etc/thanos/bucket_config.yaml'
        networks:
            - docker-consul
        depends_on:
            - prometheus
            - minio
        restart: always

    thanos-querier:
        image: quay.io/thanos/thanos:v0.13.0
        container_name: thanos-querier
        command:
            - 'query'
            - '--grpc-address=0.0.0.0:10091'
            - '--http-address=0.0.0.0:10902'
            - '--query.replica-label=replica'
            - '--store=thanos-sidecar:10091'
            - '--store=thanos-store-gateway:10091'
        ports:
            - 10902:10902
        networks:
            - docker-consul
        depends_on:
            - thanos-sidecar
        restart: always

    thanos-store-gateway:
        image: quay.io/thanos/thanos:v0.13.0
        container_name: thanos-store-gateway
        volumes:
            - ./thanos/:/etc/thanos/
        command:
            - 'store'
            - '--grpc-address=0.0.0.0:10091'
            - '--http-address=0.0.0.0:10902'
            - '--data-dir=/tmp/thanos/store'
            - '--objstore.config-file=/etc/thanos/bucket_config.yaml'
        networks:
            - docker-consul
        depends_on:
            - minio
        restart: always

    thanos-compactor:
        image: quay.io/thanos/thanos:v0.13.0
        container_name: thanos-compactor
        volumes:
            - ./thanos/:/etc/thanos/
        command:
            - 'compact'
            - '--log.level=debug'
            - '--data-dir=/data'
            - '--objstore.config-file=/etc/thanos/bucket_config.yaml'
            - '--wait'
        networks:
            - docker-consul
        depends_on:
            - minio
        restart: always

    thanos-ruler:
        image: quay.io/thanos/thanos:v0.13.0
        container_name: thanos-ruler
        volumes:
            - ./thanos/:/etc/thanos/
        command:
            - 'rule'
            - '--grpc-address=0.0.0.0:10091'
            - '--http-address=0.0.0.0:10902'
            - '--log.level=debug'
            - '--data-dir=/data'
            - '--eval-interval=15s'
            - '--rule-file=/etc/thanos/*.rules.yaml'
            - '--alertmanagers.url=http://alertmanager:9093'
            - '--query=thanos-querier:10902'
            - '--objstore.config-file=/etc/thanos/bucket_config.yaml'
            - "--label=ruler_cluster=\"vegas\""
            - "--label=ruler_replica=\"r1\""
        ports:
            - 10903:10902
        networks:
            - docker-consul        
        depends_on:
            - minio
            - thanos-querier
        restart: always

    thanos-bucket-web:
        image: quay.io/thanos/thanos:v0.13.0
        container_name: thanos-bucket-web
        volumes:
            - ./thanos/:/etc/thanos/
        command:
            - 'tools'
            - 'bucket'
            - 'web'
            - '--http-address=0.0.0.0:10902'
            - '--log.level=debug'
            - '--objstore.config-file=/etc/thanos/bucket_config.yaml'
            - '--refresh=5m'
            - '--timeout=2m'
            - '--label=replica'
        ports:
            - 10904:10902
        networks:
            - docker-consul
        depends_on:
            - minio
        restart: always

    minio:
        image: minio/minio:RELEASE.2020-05-01T22-19-14Z
        container_name: minio
        volumes:
            - minio_data:/data
        entrypoint: sh
        command: -c 'mkdir -p /data/demo-bucket && /usr/bin/minio server /data'
        environment:
            - MINIO_ACCESS_KEY=smth
            - MINIO_SECRET_KEY=Need8Chars
            - MINIO_PROMETHEUS_AUTH_TYPE=public
        ports:
            - 9000:9000
        networks:
        - docker-consul

    grafana:
      build:
        context: ./grafana
      container_name: grafana
      ports:
        - "3000:3000"
      depends_on:
        - prometheus
      networks:
        - docker-consul
      env_file:
        - ./grafana/config.monitoring
      volumes:
       - ./grafana:/var/lib/grafana

    alertmanager:
      image: prom/alertmanager:v0.12.0
      container_name: alertmanager
      ports:
        - "9093:9093"
      depends_on:
        - prometheus
      volumes:
        - ./alertmanager/:/etc/alertmanager/
      restart: always
      command:
        - '-config.file=/etc/alertmanager/alertmanager.yml'
        - '-storage.path=/alertmanager'
      networks:
        - docker-consul

    mailhog:
      image: mailhog/mailhog
      container_name: mailhog
      ports:
        - "1025:1025"
        - "8025:8025"
      depends_on:
              - alertmanager
      networks:
        - docker-consul

volumes:
    prometheus_data: {}
    minio_data: {}

networks:
  docker-consul:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
          gateway: 172.16.238.1
